#!/usr/bin/python

import sys

from scanner import Scanner
from typing import List
from plox_token import Token
from plox_parser import Parser
from ast_printer import ASTPrinter
from interpreter import Interpreter

def main():
    if len(sys.argv) == 1:
        run_repl()
    elif len(sys.argv) == 2:
        process(sys.argv[1])
    else:
        show_help()
        exit(-1)


def show_help() -> None:
    help_text = """plox [<file name>]

plox is a Python based compiler for the lox programming language.
If the program is invoked without an argument it starts a REPL. If the only
argument is a plox code file then the program compiles it. In all other
cases the program prints this help and exits.

Author: Amey Joshi
Date: 28Sep2023
Version: 1.0"""

    print(help_text)


def run_repl() -> None:
    proceed = True
    first_time = True
    prompt = "plox> "
    command = ""
    scn = Scanner(command)

    while proceed:
        if first_time:
            first_time = False
            print("Welcome to plox. Enter quit to end.")

        print(prompt, end="")
        try:
            command = input()
        except EOFError:
            proceed = False

        if command == "quit":
            proceed = False

        if proceed and len(command) > 0:
            scn.next_command(command)
            tokens = scn.scan_tokens()
            process_tokens(tokens)


def process(filename: str) -> None:
    tokens = []
    with open(filename, "r") as fp:
        scn = Scanner(fp.read())
        tokens = scn.scan_tokens()

    process_tokens(tokens)

def process_tokens(tokens: List[Token]):
    parser = Parser(tokens)
    expression = parser.parse()

    if not parser._is_error:        
        interpreter = Interpreter()
        ast_printer = ASTPrinter(expr=expression)
        ast_printer.print()
        print(interpreter.interpret(expr=expression))
    else:
        print('Syntax error.')

if __name__ == "__main__":
    main()
